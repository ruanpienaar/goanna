[

 {goanna,[

    %% Mod to which traces will be forwarded...
    {forward_callback_mod, goanna_shell_printer},

    % When set, it will push data, per interval (Msec)
    {push_interval, 150},

    % -behaviour modules, to which data will be sent, as a erlang runtime call
    {push_forward_callback_mod, [goanna_shell_printer]},

    % Nodes to apply traces on.
    {nodes, [
        % [{node,   NodeName},
        %  {cookie, Cookie},
        %  {type,   Type}]   %% tcpip_port | file | erlang_distribution

        % [{node, '4n1@ipap600b'},
        %  {cookie, galleria},
        %  {type, tcpip_port}
        % ],
        % [{node, '4n2@ipap600b'},
        %  {cookie, galleria},
        %  {type, tcpip_port}
        % ],
        % [{node, '4n3@ipap600b'},
        %  {cookie, galleria},
        %  {type, tcpip_port}
        % ],
        % [{node, '4n4@ipap600b'},
        %  {cookie, galleria},
        %  {type, tcpip_port}
        % ]
    ]},

    %% TODO: allow initial traces to be setup
    %% {start_traces, []}

    %% trace options
    %% messages, can be excluded, implying an indefinite amount of messages.
    % {default_trace_options, [{time, 60000},{messages, 10}]},
    {default_trace_options, [{time, 60000}, {messages, 100}]},

    %% Dbg p Flags: ( Item is 'all' currently )
    %% http://erldocs.com/current/runtime_tools/dbg.html?i=1&search=dbg:p#p/2
    %% http://erlang.org/doc/man/dbg.html#p-2
    %% Ex: call,
    %%     [call, timestamp], 
    %%     [call, sofl]
    %% 
    {dbg_p_flags, call}
    % {dbg_p_flags, [call, timestamp]}

 ]},

 {lager, [
  {colored, true},
  {lager_console_backend, [
	info,
	{lager_default_formatter, [
		time,
		color,
		" [",severity,"] ",
		message,
		"\e[0m\r\n"
	]}
  ]},
  {log_root, "log/"},
  {colors, [
    {debug,"\e[1;36m"},
    {info,"\e[1;37m"},
    {notice,"\e[1;36m"},
    {warning,"\e[1;33m"},
    {error,"\e[1;31m"},
    {critical,"\e[1;35m"},
    {alert,"\e[1;44m"},
    {emergency,"\e[1;41m"}
  ]},
  % '\e[0;30m' # Black - Regular
  % '\e[0;31m' # Red
  % '\e[0;32m' # Green
  % '\e[0;33m' # Yellow
  % '\e[0;34m' # Blue
  % '\e[0;35m' # Purple
  % '\e[0;36m' # Cyan
  % '\e[0;37m' # White

  % '\e[1;30m' # Black - Bold
  % '\e[1;31m' # Red
  % '\e[1;32m' # Green
  % '\e[1;33m' # Yellow
  % '\e[1;34m' # Blue
  % '\e[1;35m' # Purple
  % '\e[1;36m' # Cyan
  % '\e[1;37m' # White

  % '\e[4;30m' # Black - Underline
  % '\e[4;31m' # Red
  % '\e[4;32m' # Green
  % '\e[4;33m' # Yellow
  % '\e[4;34m' # Blue
  % '\e[4;35m' # Purple
  % '\e[4;36m' # Cyan
  % '\e[4;37m' # White

  % '\e[40m'   # Black - Background
  % '\e[41m'   # Red
  % '\e[42m'   # Green
  % '\e[43m'   # Yellow
  % '\e[44m'   # Blue
  % '\e[45m'   # Purple
  % '\e[46m'   # Cyan
  % '\e[47m'   # White
  % '\e[0m'    # Text Reset

  {handlers, [
    {lager_console_backend, debug},
    {lager_file_backend, [{file, "error.log"}, {level, error}]},
    {lager_file_backend, [{file, "console.log"}, {level, info}]}
  ]}
 ]},

 {sasl, [
         {sasl_error_logger, {file, "log/sasl-error.log"}},
         {errlog_type, error},
         {error_logger_mf_dir, "log/sasl"},      % Log directory
         {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
         {error_logger_mf_maxfiles, 5}           % 5 files max
        ]}
].

