[

 {goanna,[
    %% {push, Interval, PushModule} | pull
    {data_retrival_method,
	{push, 250, goanna_shell_printer}
	% pull
    },

    % if not set, forwards 1 for 1...
    {push_data_batch_size, 100}, % non_neg_integer()

    % Nodes to apply traces on.
    {nodes, [
        % [{node,   NodeName},
        %  {cookie, Cookie},
        %  {type,   Type}]   %% tcpip_port | file | erlang_distribution
	% [{node,'p1@pi1.cluster'}, {cookie, pasture}, {type, tcpip_port}]
    ]},

    % the max amount of times to try and reconnect, before a node is removed.
    {max_reconnecion_attempts, 100},

    %% TODO: allow initial traces to be setup, for startup when running the application
    %% Currently only escript is using this...
    {traces, [
	% [{module,mod}],
	% [{module,mod}, {function,func}],
        % [{module,mod}, {function,func}, {arity,0}],
	[{module, pasture_meetup}, {function, handle_info}],
	[{module, ibrowse}]
    ]},

    %% trace options
    %% messages, can be excluded, implying an indefinite amount of messages.
    % {default_trace_options, [{time, 60000},{messages, 10}]},
    {default_trace_options, [
	%% {time, 10000},
	{messages, 10}
    ]},

    %% Dbg p Flags: ( Item is 'all' currently )
    %% http://erldocs.com/current/runtime_tools/dbg.html?i=1&search=dbg:p#p/2
    %% http://erlang.org/doc/man/dbg.html#p-2
    %% Ex: call,
    %%     [call, timestamp],
    %%     [call, sofl]
    %%
    {dbg_p_flags, call}
    % {dbg_p_flags, [call, timestamp]}

 ]},

 {lager, [
  {colored, true},
    {handlers, [
        {lager_console_backend, [
            debug,
            {stout, [
                {date, blackb}, " ",
                {time, yellow}, " ",
                {severity, [upper, {format, "~.7s"}, color, {format, "~s "}]},
                {'$metadata', [], [node, application, line]}, " ",
                message, "\n"
            ]}
        ]},
        {lager_file_backend, [
            {level, debug},
            {file, "log/debug.log"},
            {formatter, stout},
            {formatter_config, [
                {date, blackb}, " ",
                {time, yellow}, " ",
                {severity, [upper, {format, "~.7s"}, color, {format, "~s "}]},
                {'$metadata', [], [node, application, line]}, " ",
                message, "\n"
            ]}
        ]}
    ]}
 ]},

 {sasl, [
         {sasl_error_logger, {file, "log/sasl-error.log"}},
         {errlog_type, error},
         {error_logger_mf_dir, "log/sasl"},      % Log directory
         {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
         {error_logger_mf_maxfiles, 5}           % 5 files max
        ]}
].

